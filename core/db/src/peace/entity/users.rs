//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub name_safe: String,
    #[sea_orm(unique)]
    pub name_unicode: Option<String>,
    #[sea_orm(unique)]
    pub name_unicode_safe: Option<String>,
    pub password: String,
    #[sea_orm(unique)]
    pub email: String,
    pub country: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bancho_client_hardware_records::Entity")]
    BanchoClientHardwareRecords,
    #[sea_orm(has_many = "super::chat_messages::Entity")]
    ChatMessages,
    #[sea_orm(has_many = "super::favourite_beatmaps::Entity")]
    FavouriteBeatmaps,
    #[sea_orm(has_many = "super::leaderboard::Entity")]
    Leaderboard,
    #[sea_orm(has_many = "super::scores::Entity")]
    Scores,
    #[sea_orm(has_many = "super::user_pp::Entity")]
    UserPp,
    #[sea_orm(has_many = "super::user_settings::Entity")]
    UserSettings,
    #[sea_orm(has_many = "super::user_stats::Entity")]
    UserStats,
}

impl Related<super::bancho_client_hardware_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BanchoClientHardwareRecords.def()
    }
}

impl Related<super::chat_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChatMessages.def()
    }
}

impl Related<super::favourite_beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FavouriteBeatmaps.def()
    }
}

impl Related<super::leaderboard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Leaderboard.def()
    }
}

impl Related<super::scores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Scores.def()
    }
}

impl Related<super::user_pp::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPp.def()
    }
}

impl Related<super::user_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSettings.def()
    }
}

impl Related<super::user_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStats.def()
    }
}

impl Related<super::beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        super::beatmap_ratings::Relation::Beatmaps.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::beatmap_ratings::Relation::Users.def().rev())
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_users::Relation::Channels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_users::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

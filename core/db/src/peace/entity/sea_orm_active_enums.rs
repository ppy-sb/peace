//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "channel_handle_type"
)]
pub enum ChannelHandleType {
    #[sea_orm(string_value = "join")]
    Join,
    #[sea_orm(string_value = "kick_user")]
    KickUser,
    #[sea_orm(string_value = "mute_user")]
    MuteUser,
    #[sea_orm(string_value = "send_message")]
    SendMessage,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "channel_type")]
pub enum ChannelType {
    #[sea_orm(string_value = "group")]
    Group,
    #[sea_orm(string_value = "multiplayer")]
    Multiplayer,
    #[sea_orm(string_value = "private")]
    Private,
    #[sea_orm(string_value = "public")]
    Public,
    #[sea_orm(string_value = "spectaor")]
    Spectaor,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "game_mode")]
pub enum GameMode {
    #[sea_orm(string_value = "Fruits")]
    Fruits,
    #[sea_orm(string_value = "Mania")]
    Mania,
    #[sea_orm(string_value = "Standard")]
    Standard,
    #[sea_orm(string_value = "Taiko")]
    Taiko,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "pp_version")]
pub enum PpVersion {
    #[sea_orm(string_value = "v1")]
    V1,
    #[sea_orm(string_value = "v2")]
    V2,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rank_status")]
pub enum RankStatus {
    #[sea_orm(string_value = "Approved")]
    Approved,
    #[sea_orm(string_value = "Graveyard")]
    Graveyard,
    #[sea_orm(string_value = "Loved")]
    Loved,
    #[sea_orm(string_value = "Pending")]
    Pending,
    #[sea_orm(string_value = "Qualified")]
    Qualified,
    #[sea_orm(string_value = "Ranked")]
    Ranked,
    #[sea_orm(string_value = "Wip")]
    Wip,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ranking_type")]
pub enum RankingType {
    #[sea_orm(string_value = "pp_v1")]
    PpV1,
    #[sea_orm(string_value = "pp_v2")]
    PpV2,
    #[sea_orm(string_value = "score_v1")]
    ScoreV1,
    #[sea_orm(string_value = "score_v2")]
    ScoreV2,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(None)",
    enum_name = "score_kind"
)]
pub enum ScoreKind {
    #[sea_orm(string_value = "classic")]
    Classic,
    #[sea_orm(string_value = "generic")]
    Generic,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "score_grade")]
pub enum ScoreGrade {
    #[sea_orm(string_value = "A")]
    A,
    #[sea_orm(string_value = "B")]
    B,
    #[sea_orm(string_value = "C")]
    C,
    #[sea_orm(string_value = "D")]
    D,
    #[sea_orm(string_value = "F")]
    F,
    #[sea_orm(string_value = "S")]
    S,
    #[sea_orm(string_value = "SH")]
    Sh,
    #[sea_orm(string_value = "X")]
    X,
    #[sea_orm(string_value = "XH")]
    Xh,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(None)",
    enum_name = "score_status"
)]
pub enum ScoreStatus {
    #[sea_orm(string_value = "DNF")]
    DNF,
    #[sea_orm(string_value = "Passed")]
    Passed,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "score_version")]
pub enum ScoreVersion {
    #[sea_orm(string_value = "v1")]
    V1,
    #[sea_orm(string_value = "v2")]
    V2,
}
